"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;
var _vite = _interopRequireDefault(await jitiImport("@tailwindcss/vite"));
var _kit = await jitiImport("@nuxt/kit");
var _package = _interopRequireDefault(await jitiImport("./package.json"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };} // https://nuxt.com/docs/api/configuration/nuxt-config

const { resolve } = (0, _kit.createResolver)("file:///D:/Code/Nuxt/v4/LearnNuxt/nuxt-boilerplate/nuxt.config.ts");

// Define config with proper type
var _default = exports.default = defineNuxtConfig({
  modules: [
  '@nuxt/ui',
  '@nuxt/devtools',
  '@nuxt/eslint',
  '@nuxt/icon',
  '@nuxt/fonts',
  '@nuxtjs/robots',
  '@nuxtjs/sitemap',
  'nuxt-schema-org',
  '@nuxtjs/i18n'],

  devtools: { enabled: true },
  app: {
    head: {
      link: [
      { rel: 'stylesheet', href: '~/assets/css/main.css' }]

    },
    rootAttrs: {
      'vaul-drawer-wrapper': '',
      'class': 'bg-[var(--ui-bg)]'
    }
  },
  site: {
    url: process.env.NUXT_PUBLIC_SITE_URL || 'http://localhost:3000',
    name: 'Nuxt Boilerplate',
    description: 'A modern Nuxt 3 boilerplate with comprehensive SEO setup',
    defaultLocale: 'en'
  },

  runtimeConfig: {
    public: {
      version: _package.default.version,
      baseUrl: process.env.BASE_URL || 'http://localhost:3000',
      dependencies: {
        vue: _package.default.dependencies.vue,
        nuxt: _package.default.dependencies.nuxt,
        nuxtUI: _package.default.dependencies['@nuxt/ui']
      },
      devDependencies: {
        typescript: _package.default.devDependencies.typescript
      }
    }
  },
  future: {
    compatibilityVersion: 4
  },

  // To re-enable _all_ Nuxt v3 behavior, set the following options:
  // srcDir: ".",
  //  dir: {
  //   app: "app",
  // },
  // experimental: {
  //   scanPageMeta: 'after-resolve',
  //   sharedPrerenderData: false,
  //   compileTemplate: true,
  //   resetAsyncDataToUndefined: true,
  //   templateUtils: true,
  //   relativeWatchPaths: true,
  //   normalizeComponentNames: false,
  //   spaLoadingTemplateLocation: 'within',
  //   defaults: {
  //     useAsyncData: {
  //       deep: true
  //     }
  //   }
  // },
  // features: {
  //   inlineStyles: true
  // },
  // unhead: {
  //   renderSSRHeadOptions: {
  //     omitLineBreaks: false
  //   }
  // }
  compatibilityDate: '2025-01-09',
  vite: {
    plugins: [
    (0, _vite.default)()]

  },
  postcss: {
    plugins: {
      '@tailwindcss/postcss': {},
      'autoprefixer': {}
    }
  },
  eslint: {
    config: {
      stylistic: true
    }
  },
  // i18n: {
  //   strategy: 'prefix_except_default',
  //   defaultLocale: 'en',
  //   locales: [
  //     {
  //       code: 'en',
  //       name: 'English',
  //       file: 'en.json',
  //     },
  //     {
  //       code: 'es',
  //       name: 'Espa√±ol',
  //       file: 'es.json',
  //     },
  //   ],
  //   lazy: true,
  // },
  icon: {
    customCollections: [{
      prefix: 'custom',
      dir: resolve('./app/assets/icons')
    }],
    clientBundle: {
      scan: true,
      includeCustomCollections: true
    },
    provider: 'iconify',
    serverBundle: {
      collections: ['uil', 'heroicons', 'logos', 'lucide', 'simple-icons', 'mdi', 'logos', 'skill-icons', 'carbon', 'catppuccin']
    }
  },
  robots: {
    sitemap: ['/sitemap.xml'],
    robotsEnabledValue: 'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1'
  }
}); /* v9-4c57c2ed2a33218f */
